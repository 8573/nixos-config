# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

let
  lib = pkgs.lib;
in

let

SECURE = false;
LIGHTWEIGHT = false;
USE-GRSEC = SECURE;
USE-CUSTOM-GRSEC = false;
USE-NIXOS-GRSEC = USE-GRSEC && !USE-CUSTOM-GRSEC;
USE-X11 = !SECURE && true;
USE-KDE = USE-X11 && !LIGHTWEIGHT && false;
GET-KDE = USE-X11 && (USE-KDE || !LIGHTWEIGHT) && false;
USE-I3 = USE-X11 && !USE-KDE;
GET-I3 = USE-X11 && (USE-I3 || !LIGHTWEIGHT);
ENABLE-ALL-FIRMWARE = !SECURE && !LIGHTWEIGHT;

in {

  imports = [
    ./secret/users.nix
  ];

  boot.cleanTmpDir = true;

  # Prevent Wi-Fi from being significantly slowed when Bluetooth is on.
  boot.extraModprobeConfig = ''
    options iwlwifi bt_coex_active=N
  '';

  boot.initrd = {
    availableKernelModules = [
      # Generated by `nixos-generate-config`.
      "xhci_pci" "ehci_pci" "ahci" "usb_storage"
    ];
    kernelModules = [
      "zfs"
    ];
    supportedFilesystems = [ "zfs" "vfat" ];
  };

  boot.loader = {
    systemd-boot = {
      enable = true;
    };
    efi = {
      canTouchEfiVariables = SECURE;
    };
    timeout = 3;
  };

  # Per <https://nixos.org/wiki/ZFS_on_NixOS>.
  boot.supportedFilesystems = [ "zfs" "vfat" ];

  boot.tmpOnTmpfs = true;

  boot.zfs = {
    forceImportAll = false;
    forceImportRoot = false;
  };

  environment.etc."gitconfig".text = ''
    [core]
        compression = 9
        pager = less -+FSX
    [diff]
        algorithm = minimal
        compactionHeuristic = yes
        mnemonicPrefix = yes
        renames = copy
    [fetch]
        fsckObjects = yes
    [i18n]
        commitEncoding = utf-8
        logOutputEncoding = utf-8
    [interactive]
        diffFilter = ${pkgs.gitFull}/share/git/contrib/diff-highlight/diff-highlight
    [log]
        date = iso8601
    [pager]
        diff = ${pkgs.gitFull}/share/git/contrib/diff-highlight/diff-highlight | less -+FSX
        log = ${pkgs.gitFull}/share/git/contrib/diff-highlight/diff-highlight | less -+FSX
        show = ${pkgs.gitFull}/share/git/contrib/diff-highlight/diff-highlight | less -+FSX
    [rebase]
        missingCommitsCheck = error
        stat = yes
  '';

  environment.etc."vim/vimrc".text = ''
    " This makes comments visible in the kernel console when Redshift is on.
    colorscheme desert

    " sensible.vim, revision 8c4429c70c186f9be47121b126c13095793062a1.
    ${builtins.readFile (pkgs.fetchurl {
      url = https://raw.githubusercontent.com/tpope/vim-sensible/8c4429c70c186f9be47121b126c13095793062a1/plugin/sensible.vim;
      sha256 = "1jb2xb4wk5snglrkql2d2pr9dklcwcbhpzk8sg6vrz91zqcqqk9l";
    })}
  '';

  environment.extraInit = ''
    umask 077
  '';

  environment.noXlibs = !USE-X11;

  environment.systemPackages = (with pkgs; [
    # Applications (that don't need a graphical environment).
    elinks
    vim_configurable
    vlc
    weechat
  ] ++ [
    # Utilities, general.
    aspell
    atool
    file
    imagemagick
    jq
    #libav
    libqalculate
    silver-searcher
    tree
    wdiff
    wget
  ] ++ [
    # Utilities, network.
    ldns
    telnet
    whois
  ] ++ [
    # Utilities, security/cryptographic.
    apg
    checksec
    gnupg
    openssl
  ] ++ [
    # Utilities, monitoring.
    htop
    iotop
    tcpdump
  ] ++ [
    # Utilities, hardware.
    alsaUtils
    lshw
    pciutils
    smartmontools
  ] ++ [
    # Software development, general.
    gdb
    gitFull
    gnumake
    llvm
    llvmPackages.lldb
    tig
  ] ++ [
    # Software development, C-family.
    clang
    gcc
  ] ++ [
    # Software development, shell scripting.
    shellcheck
  ] ++ [
    # Software development, Rust.
    cargo
    rustc
    rustfmt
    rustracer
  ] ++ [
    # Misc. interpreters.
    nodejs
  ] ++ [
    # Nix
    nix-prefetch-scripts
    nix-repl
  ] ++ [
    # Data.
    aspellDicts.en
    man-pages
    posix_man_pages
  ] ++ lib.optionals (!USE-X11) [
    # Non-graphical variants of programs with different packages for having a GUI or not.
    nmap
  ] ++ lib.optionals USE-X11 [
    # Graphical applications.
    chromium
    audacity
    nmap_graphical
  ] ++ lib.optionals USE-X11 [
    # Utilities, X11.
    dmenu
    xclip
    xorg.xbacklight
    xorg.xev
  ] ++ lib.optionals GET-I3 [
    i3status
  ]);

  fileSystems."/" = {
    device = "zpool-b42d3-0-1/b42d3/nixos";
    fsType = "zfs";
    options = ["noatime" "nodiratime" "suid"];
  };

  fileSystems."/home" = {
    device = "zpool-b42d3-0-1/b42d3/users";
    fsType = "zfs";
    options = ["noatime" "nodiratime" "nosuid"];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/185A-2ABB";
    fsType = "vfat";
    options = ["noatime" "nodiratime" "nosuid" "utf8" "tz=UTC"];
  };

  fonts.fontconfig = lib.optionalAttrs USE-X11 {
    defaultFonts = {
      sansSerif = ["Noto Sans" "DejaVu Sans"];
      serif = ["Noto Serif" "DejaVu Serif"];
      monospace = ["DejaVu Sans Mono" "Noto Mono"];
    };
  };

  fonts.fonts = lib.optionals USE-X11 (with pkgs; [
    noto-fonts
    noto-fonts-emoji
    dejavu_fonts
  ]);

  hardware.bluetooth = {
    enable = true;
  };

  # Selected by `nixos-generate-config`.
  hardware.enableAllFirmware = ENABLE-ALL-FIRMWARE;

  networking.hostId = "b42d35f1";

  networking.hostName = "b42d3"; # Define your hostname.

  networking.nameservers = [
    "8.8.8.8"
    "2001:4860:4860::8888"
    "8.8.4.4"
    "2001:4860:4860::8844"
  ];

  # Enables wireless support via wpa_supplicant.
  networking.wireless = {
    enable = true;
  };

  nix = {
    buildCores = 4;
    maxJobs = 4;
    useSandbox = true;
    extraOptions = ''
      auto-optimise-store = true
      build-fallback = false
    '';
  };

  nixpkgs.config = {
    packageOverrides = pkgs: {
      gnupg = pkgs.gnupg.override {
        x11Support = USE-X11;
      };
    };
  };

  powerManagement.enable = false;

  programs.bash = {
    # Check the security of this.
    enableCompletion = !SECURE;
    interactiveShellInit = ''
      # See also <https://github.com/mrzool/bash-sensible/raw/d252937b073de6afbf5ac0ed3d7a9ae015ec9fab/sensible.bash>

      set -o noclobber

      #shopt -s autocd # Bash autocd is too annoying because it prints the `cd` command run.
      shopt -s checkjobs
      shopt -s checkwinsize
      shopt -s cmdhist
      shopt -s dirspell 
      shopt -s extglob
      shopt -s globstar
      shopt -s histappend
      shopt -s histverify
      shopt -s no_empty_cmd_completion

      bind 'set completion-ignore-case on'
      bind 'set completion-map-case on'
      bind '"\e[A": history-search-backward'
      bind '"\e[B": history-search-forward'
      bind '"\e[C": forward-char'
      bind '"\e[D": backward-char'

      HISTCONTROL='erasedups:ignoreboth'
      export HISTIGNORE='exit:ls:l:ll:bg:fg:history:clear'
      HISTSIZE=65536
      HISTTIMEFORMAT='%F %T '
    '';
    shellAliases = let std = config.environment.shellAliases; in std // {
      "ls" = "${std.ls} --classify --si --time-style=posix-long-iso";
      "l" = "ls --format=long --almost-all";
      "cp" = "cp --interactive";
      "mv" = "mv --interactive";
      "rm" = "rm --interactive=once";
    };
  };

  programs.mosh = {
    enable = true;
  };

  programs.ssh = {
    extraConfig = ''
      ControlMaster auto
      ControlPath ~/.ssh/mux-socket-%C
      ControlPersist 10m
      VerifyHostKeyDNS ask
      VisualHostKey yes
    '';
  };

  programs.tmux = {
    enable = true;
    clock24 = true;
    historyLimit = 65536;
    terminal = "screen-256color";
    extraTmuxConf = ''
      set-option -g mouse on
      set-option -g renumber-windows on
      set-window-option -g allow-rename off
    '';
  };

  security.apparmor = {
    enable = true;
  };

  security.grsecurity = {
    enable = USE-NIXOS-GRSEC;
  };

  # List services that you want to enable:

  services.gpm = {
    enable = true;
  };

  services.logind = {
    extraConfig = ''
      # For ZFS's sake, disable automatic lid-close/open suspend/resume.
      HandleLidSwitch=ignore
      # Don't break tmux.
      KillUserProcesses=no
    '';
  };

  services.redshift = {
    enable = USE-X11;
    # City
    latitude = "34";
    longitude = "-118";
    # Conf-US-CO-GE
    #latitude = "39";
    #longitude = "-105";
    # Conf-US-NC-Gy
    #latitude = "36";
    #longitude = "-80";
    temperature.night = 1850;
  };

  services.xserver = {
    enable = USE-X11;
    desktopManager = {
      default = if USE-KDE then "kde5" else "none";
      kde5.enable = GET-KDE;
      xterm.enable = false;
    };
    displayManager.slim = {
      enable = USE-X11;
      autoLogin = !SECURE;
      defaultUser = "c74d";
    };
    multitouch = {
      # `multitouch` overrides `synaptics` and is less configurable.
      enable = false;
      ignorePalm = true;
    };
    synaptics = {
      enable = true;
      accelFactor = "0.0625";
      /*additionalOptions = ''
        Option "HorizScrollDelta" "256"
        Option "VertScrollDelta" "256"
      '';*/
      maxSpeed = "1.5";
      minSpeed = "0.25";
      palmDetect = true;
      twoFingerScroll = true;
      #vertEdgeScroll = false;
    };
    windowManager = {
      default = if USE-I3 then "i3" else "none";
      i3.enable = GET-I3;
    };
    xkbOptions = "compose:caps";
  };

  sound.extraConfig = ''
    defaults.pcm.!card 1
  '';

  swapDevices = [
    { device = "/dev/disk/by-partlabel/Linux-swap-partition-for-b42d3"; }
  ];

  time.timeZone = "UTC";

  users.mutableUsers = false;

  zramSwap.enable = true;

}

# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, lib, pkgs, ... }:

let

SECURE = false;
LIGHTWEIGHT = false;
USE-GRSEC = SECURE;
USE-X11 = !SECURE && true;
USE-KDE = USE-X11 && !LIGHTWEIGHT && true;
GET-KDE = USE-X11 && USE-KDE || (!LIGHTWEIGHT && true);
GET-I3 = USE-X11 && !USE-KDE;
ENABLE-ALL-FIRMWARE = !SECURE && !LIGHTWEIGHT;

in rec {

  imports = [
    ./secret/users.nix
  ];

  boot.cleanTmpDir = true;

  boot.initrd = {
    # Generated by `nixos-generate-config`.
    availableKernelModules = ["ehci_pci" "ahci" "xhci_pci" "usbhid" "usb_storage" "sd_mod" "sr_mod"];
    kernelModules = ["zfs"];
    supportedFilesystems = ["zfs" "vfat"];
  };

  # Generated by `nixos-generate-config`.
  boot.kernelModules = ["kvm-intel"];

  boot.loader = {
    systemd-boot = {
      # Generated by `nixos-generate-config`.
      enable = true;
    };
    efi = {
      # Generated by `nixos-generate-config`.
      canTouchEfiVariables = true;
    };
  };

  boot.supportedFilesystems = ["zfs" "vfat"];

  boot.tmpOnTmpfs = true;

  boot.zfs = {
    forceImportAll = false;
    forceImportRoot = false;
  };

  environment.etc."gitconfig".text = ''
    [core]
        compression = 9
        pager = less -+FSX
    [diff]
        algorithm = minimal
        compactionHeuristic = yes
        mnemonicPrefix = yes
        renames = copy
    [fetch]
        fsckObjects = yes
    [i18n]
        commitEncoding = utf-8
        logOutputEncoding = utf-8
    [interactive]
        diffFilter = ${pkgs.gitFull}/share/git/contrib/diff-highlight/diff-highlight
    [log]
        date = iso8601
    [pager]
        diff = ${pkgs.gitFull}/share/git/contrib/diff-highlight/diff-highlight | less -+FSX
        log = ${pkgs.gitFull}/share/git/contrib/diff-highlight/diff-highlight | less -+FSX
        show = ${pkgs.gitFull}/share/git/contrib/diff-highlight/diff-highlight | less -+FSX
    [rebase]
        missingCommitsCheck = error
        stat = yes
  '';

  environment.etc."vim/vimrc".source = pkgs.fetchurl {
    url = https://raw.githubusercontent.com/tpope/vim-sensible/8c4429c70c186f9be47121b126c13095793062a1/plugin/sensible.vim;
    sha256 = "1jb2xb4wk5snglrkql2d2pr9dklcwcbhpzk8sg6vrz91zqcqqk9l";
  };

  environment.extraInit = ''
    umask 077
  '';

  environment.noXlibs = !USE-X11;

  environment.systemPackages = (with pkgs; [
    # Common applications (that don't require a graphical environment).
    elinks
    vim_configurable
    vlc
    weechat
  ] ++ [
    # Utilities, general.
    aspell
    atool
    dash
    file
    imagemagick
    jq
    #libav
    libqalculate
    silver-searcher
    tree
    wdiff
    wget
  ] ++ [
    # Utilities, network.
    ldns
    whois
  ] ++ [
    # Utilities, security/cryptographic.
    apg
    checksec
    gnupg
    openssl
  ] ++ [
    # Utilities, monitoring.
    htop
    iotop
    tcpdump
  ] ++ [
    # Utilities, hardware.
    lshw
    pciutils
    smartmontools
  ] ++ [
    # Software development, general.
    gdb
    gitFull
    gnumake
    llvm
    llvmPackages.lldb
    subversion
    tig
  ] ++ [
    # C-family development.
    clang
    gcc
  ] ++ [
    # Shell scripting.
    shellcheck
  ] ++ [
    # Rust development.
    cargo
    rustc
    rustfmt
    rustracer
  ] ++ [
    # Misc. interpreters.
    nodejs
  ] ++ [
    # Nix
    nix-prefetch-scripts
    nix-repl
  ] ++ [
    # Data.
    aspellDicts.en
    man-pages
    posix_man_pages
  ] ++ lib.optionals (!USE-X11) [
    # Non-graphical variants of programs with separate packages
    # for no-GUI and (GUI + no-GUI).
    nmap
  ] ++ lib.optionals USE-X11 [
    # Common graphical applications.
    chromium
    audacity
    nmap_graphical
  ] ++ lib.optionals USE-X11 [
    # Utilities, X11.
    xclip
  ] ++ lib.optionals GET-I3 [
    i3status
  ]);

  hardware.enableAllFirmware = ENABLE-ALL-FIRMWARE;

  hardware.sane = {
    enable = true;
    extraBackends = with pkgs; [
      hplip
    ];
  };

  fileSystems."/" = {
    device = "zpool-dec4a-0-1/root/nixos";
    fsType = "zfs";
    options = ["noatime" "nodiratime" "suid"];
  };

  fileSystems."/home" = {
    device = "zpool-dec4a-0-1/users";
    fsType = "zfs";
    options = ["noatime" "nodiratime" "nosuid"];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/9786-99E0";
    fsType = "vfat";
    options = ["noatime" "nodiratime" "nosuid" "utf8" "tz=UTC"];
  };

  fonts.fontconfig = lib.optionalAttrs USE-X11 {
    defaultFonts = {
      sansSerif = ["Noto Sans" "DejaVu Sans"];
      serif = ["Noto Serif" "DejaVu Serif"];
      monospace = ["DejaVu Sans Mono" "Noto Mono"];
    };
  };

  fonts.fonts = lib.optionals USE-X11 (with pkgs; [
    noto-fonts
    noto-fonts-cjk
    noto-fonts-emoji
    dejavu_fonts
  ]);

  networking.hostId = "dec4a944";

  networking.hostName = "dec4a"; # Define your hostname.

  networking.nameservers = [
    "8.8.8.8"
    "2001:4860:4860::8888"
    "8.8.4.4"
    "2001:4860:4860::8844"
  ];

  networking.wireless = {
    enable = true;  # Enables wireless support via wpa_supplicant.
  };

  nix = {
    buildCores = 4;
    gc = {
      automatic = true;
    };
    maxJobs = 4;
    useSandbox = true;
    extraOptions = ''
      auto-optimise-store = true
      build-fallback = false
    '';
  };

  programs.bash = {
    enableCompletion = true;
    interactiveShellInit = ''
      # See also <https://github.com/mrzool/bash-sensible>

      set -o noclobber

      shopt -s checkjobs
      shopt -s checkwinsize
      shopt -s cmdhist
      shopt -s dirspell
      shopt -s extglob
      shopt -s globstar
      shopt -s histappend
      shopt -s histverify
      shopt -s no_empty_cmd_completion

      bind 'set completion-ignore-case on'
      bind 'set completion-map-case on'
      bind '"\e[A": history-search-backward'
      bind '"\e[B": history-search-forward'
      bind '"\e[C": forward-char'
      bind '"\e[D": backward-char'

      HISTCONTROL='erasedups:ignoreboth'
      export HISTIGNORE='exit:ls:l:ll:bg:fg:history:clear'
      HISTSIZE=65536
      HISTTIMEFORMAT='%F %T '
    '';
    shellAliases = let std = config.environment.shellAliases; in std // {
      "ls" = "${std.ls} --classify --si --time-style=posix-long-iso";
      "l" = "ls --format=long --almost-all";
      "cp" = "cp --interactive";
      "mv" = "mv --interactive";
      "rm" = "rm --interactive=once";
    };
  };

  programs.mosh = {
    enable = true;
  };

  programs.ssh = {
    extraConfig = ''
      Host github.com
        # GitHub closes the idle connections, making SSH print non-sequitur
        # messages in the terminal.
        ControlMaster no

      Host *
        ControlMaster auto
        ControlPath ~/.ssh/mux-socket-%C
        ControlPersist 10m
        VerifyHostKeyDNS ask
        VisualHostKey yes
    '';
  };

  programs.tmux = {
    enable = true;
    clock24 = true;
    historyLimit = 65536;
    terminal = "screen-256color";
    extraTmuxConf = ''
      set-option -g mouse on
      set-option -g renumber-windows on
      set-window-option -g allow-rename off
    '';
  };

  security.apparmor = {
    enable = true;
  };

  security.grsecurity = {
    enable = USE-GRSEC;
  };

  services.fail2ban = {
    enable = true;
    jails = {
      ssh-iptables = ''
        enabled = true
      '';
    };
  };

  services.gpm = {
    #enable = true;
  };

  services.logind = {
    extraConfig = ''
      # Don't break tmux.
      KillUserProcesses=no
    '';
  };

  services.openssh = {
    enable = true;
    #startWhenNeeded = true; # Note: this may result in tmux being killed on logout, apparently independent of KillUserProcesses.
    listenAddresses = [
      # I can't seem to get past my home router to this computer via IPv4, and
      # yet the fail2ban log fills with bots and skiddies who seem to manage
      # it just fine, so I give up on having SSHd listen on IPv4.
      { addr = "[::]";
        port = 22; }
    ];
  };

  services.printing = {
    enable = true;
    drivers = with pkgs; [
      hplip
    ];
  };

  services.redshift = {
    enable = USE-X11 && false;
    latitude = "34";
    longitude = "-118";
    temperature = {
      night = 1850;
    };
  };

  services.xserver = {
    enable = USE-X11;
    desktopManager = {
      default = if USE-KDE then "kde5" else "none";
      kde5.enable = GET-KDE;
      xterm.enable = false;
    };
    displayManager = {
      sddm.enable = true;
    };
    windowManager = {
      default = if !USE-KDE then "i3" else "none";
      i3.enable = GET-I3;
    };
    xkbOptions = "compose:caps";
  };

  swapDevices = [
    { device = "/dev/disk/by-uuid/7c57cf03-d918-410b-bb9e-b0f56476f078"; }
  ];

  system.autoUpgrade = {
    enable = true;
  } // lib.optionalAttrs (assert time ? timeZone; time.timeZone == "UTC") {
    dates = "11:40";
  };

  # The NixOS release to be compatible with for stateful data such as databases.
  system.stateVersion = "16.03";

  # Set your time zone.
  time.timeZone = "UTC";

  users.mutableUsers = false;

  zramSwap.enable = true;

}
